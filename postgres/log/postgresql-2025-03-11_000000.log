2025-03-11 11:38:30 PDT ERROR:  relation "rules.Conditions" does not exist at character 15
2025-03-11 11:38:30 PDT STATEMENT:  SELECT *
	FROM Rules."Conditions" c
	WHERE c.CID = ANY(
		SELECT a.CID FROM Rules."Actions" a WHERE a.RuleID = 1
	)
2025-03-11 11:38:48 PDT ERROR:  relation "rules.Conditions" does not exist at character 15
2025-03-11 11:38:48 PDT STATEMENT:  SELECT *
	FROM rules."Conditions" c
	WHERE c.CID = ANY(
		SELECT a.CID FROM Rules."Actions" a WHERE a.RuleID = 1
	)
2025-03-11 11:39:10 PDT ERROR:  relation "rules.Conditions" does not exist at character 15
2025-03-11 11:39:10 PDT STATEMENT:  SELECT *
	FROM rules."Conditions" 
2025-03-11 11:39:15 PDT ERROR:  relation "rules.Conditions" does not exist at character 15
2025-03-11 11:39:15 PDT STATEMENT:  SELECT * FROM rules."Conditions"; 
2025-03-11 11:44:34 PDT ERROR:  relation "rules.Selections" does not exist at character 50
2025-03-11 11:44:34 PDT STATEMENT:  SELECT * FROM rules."Conditions"; 
	SELECT * FROM rules."Selections";
	-- INSERT INTO rules."Actions" ()
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     ('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 	('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- SELECT * FROM rules."Actions";
2025-03-11 11:44:40 PDT ERROR:  relation "rules.Selection" does not exist at character 50
2025-03-11 11:44:40 PDT STATEMENT:  SELECT * FROM rules."Conditions"; 
	SELECT * FROM rules."Selection";
	-- INSERT INTO rules."Actions" ()
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     ('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 	('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- SELECT * FROM rules."Actions";
2025-03-11 11:46:19 PDT ERROR:  column "max" does not exist at character 136
2025-03-11 11:46:19 PDT STATEMENT:  SELECT * FROM rules."Conditions"; 
	
	INSERT INTO rules."Selectors" ("Schema", "Table", "Target", "Aggregator")
	VALUES
		(null, null, 10, MAX);
	
	SELECT * FROM rules."Selectors";
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     ('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 	('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- SELECT * FROM rules."Actions";
2025-03-11 11:46:24 PDT ERROR:  syntax error at or near "MAX" at character 1
2025-03-11 11:46:24 PDT STATEMENT:  MAX
2025-03-11 11:46:38 PDT ERROR:  duplicate key value violates unique constraint "Selectors_pkey"
2025-03-11 11:46:38 PDT DETAIL:  Key ("SID")=(1) already exists.
2025-03-11 11:46:38 PDT STATEMENT:  SELECT * FROM rules."Conditions"; 
	
	INSERT INTO rules."Selectors" ("Target", "Aggregator")
	VALUES
		(10, 'MAX');
	
	SELECT * FROM rules."Selectors";
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     ('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 	('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- SELECT * FROM rules."Actions";
2025-03-11 11:47:27 PDT ERROR:  duplicate key value violates unique constraint "Selectors_pkey"
2025-03-11 11:47:27 PDT DETAIL:  Key ("SID")=(2) already exists.
2025-03-11 11:47:27 PDT STATEMENT:  SELECT * FROM rules."Conditions"; 
	
	INSERT INTO rules."Selectors" ("SID", "Target", "Aggregator")
	VALUES
		(nextval('rules."Selectors_SID_seq"'::regclass), 10, 'MAX');
	
	SELECT * FROM rules."Selectors";
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     ('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 	('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- SELECT * FROM rules."Actions";
2025-03-11 11:47:40 PDT LOG:  checkpoint starting: time
2025-03-11 11:47:41 PDT LOG:  checkpoint complete: wrote 9 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.895 s, sync=0.025 s, total=0.948 s; sync files=8, longest=0.012 s, average=0.004 s; distance=8 kB, estimate=623 kB; lsn=0/1CD1C78, redo lsn=0/1CD1C20
2025-03-11 11:48:13 PDT ERROR:  column a.cid does not exist at character 64
2025-03-11 11:48:13 PDT STATEMENT:  SELECT * 
	FROM rules."Conditions" c
	WHERE c.CID = ANY(
		SELECT a.CID FROM Rules."Actions" a WHERE a.RuleID = 1
	)
	
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     ('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 	('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- SELECT * FROM rules."Actions";
2025-03-11 11:48:44 PDT ERROR:  column a.cid does not exist at character 64
2025-03-11 11:48:44 PDT STATEMENT:  SELECT * 
	FROM rules."Conditions" c
	WHERE c.CID = ANY(
		SELECT a.CID 
		FROM Rules."Actions" a 
		WHERE a.RuleID = c.CID
	)
	
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     ('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 	('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- SELECT * FROM rules."Actions";
2025-03-11 11:49:00 PDT ERROR:  column a.cid does not exist at character 64
2025-03-11 11:49:00 PDT STATEMENT:  SELECT * 
	FROM rules."Conditions" c
	WHERE c.CID = ANY(
		SELECT a.CID 
		FROM rules."Actions" a 
		WHERE a.RuleID = c.CID
	)
	
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     ('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 	('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- SELECT * FROM rules."Actions";
2025-03-11 11:49:47 PDT ERROR:  relation "rules.Rules" does not exist at character 422
2025-03-11 11:49:47 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	SELECT *
	FROM rules."Actions" a;
	-- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     ('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 	('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- SELECT * FROM rules."Actions";
	SELECT * FROM rules."Rules"
2025-03-11 11:50:54 PDT ERROR:  SELECT * with no tables specified is not valid at character 8
2025-03-11 11:50:54 PDT STATEMENT:  SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
2025-03-11 11:51:22 PDT ERROR:  column "SID" of relation "Actions" does not exist at character 421
2025-03-11 11:51:22 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	INSERT INTO rules."Actions" ("CID", "SID")
	VALUES
		(1,1),
		(1,2);
	
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
2025-03-11 11:51:45 PDT ERROR:  insert or update on table "Actions" violates foreign key constraint "fk_cid"
2025-03-11 11:51:45 PDT DETAIL:  Key (CID)=(2) is not present in table "Conditions".
2025-03-11 11:51:45 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	INSERT INTO rules."Actions" ("RuleID", "CID")
	VALUES
		(1,1),
		(1,2);
	
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
2025-03-11 11:52:40 PDT LOG:  checkpoint starting: time
2025-03-11 11:52:40 PDT LOG:  checkpoint complete: wrote 6 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.539 s, sync=0.011 s, total=0.576 s; sync files=6, longest=0.003 s, average=0.002 s; distance=0 kB, estimate=560 kB; lsn=0/1CD1FC0, redo lsn=0/1CD1F68
2025-03-11 11:53:39 PDT ERROR:  syntax error at or near "1" at character 94
2025-03-11 11:53:39 PDT STATEMENT:  INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	VALUES
		(1,'=',2),
		(3,"="1);
2025-03-11 11:53:46 PDT ERROR:  syntax error at or near "1" at character 560
2025-03-11 11:53:46 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	VALUES
		(1,'=',2),
		(3,'='1);
	
	SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
2025-03-11 11:57:40 PDT LOG:  checkpoint starting: time
2025-03-11 11:57:41 PDT LOG:  checkpoint complete: wrote 7 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.660 s, sync=0.023 s, total=0.698 s; sync files=7, longest=0.012 s, average=0.004 s; distance=2 kB, estimate=505 kB; lsn=0/1CD2860, redo lsn=0/1CD2808
2025-03-11 11:59:21 PDT ERROR:  column a.cid does not exist at character 65
2025-03-11 11:59:21 PDT STATEMENT:  
	SELECT *
	FROM Rules."Conditions" c
	WHERE c.CID = ANY (
		SELECT a.CID FROM Rules."Actions" a WHERE a.RuleID = 1
	)
2025-03-11 11:59:39 PDT ERROR:  syntax error at or near "RuleID" at character 1
2025-03-11 11:59:39 PDT STATEMENT:  RuleID
2025-03-11 11:59:54 PDT ERROR:  column "cid" does not exist at character 67
2025-03-11 11:59:54 PDT STATEMENT:  
	SELECT *
	FROM Rules."Conditions" c
	WHERE c."CID" = ANY (
		SELECT CID FROM Rules."Actions" a WHERE a."RuleID" = 1
	)
2025-03-11 12:00:04 PDT ERROR:  column "cid" does not exist at character 67
2025-03-11 12:00:04 PDT STATEMENT:  
	SELECT *
	FROM Rules."Conditions" c
	WHERE c."CID" = ANY (
		SELECT CID FROM Rules."Actions" WHERE CID = 1
	)
2025-03-11 12:00:20 PDT ERROR:  column "cid" does not exist at character 108
2025-03-11 12:00:20 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
		SELECT *
		FROM Rules."Actions" 
		WHERE CID = 1
	-- )
2025-03-11 12:01:06 PDT ERROR:  column "cid" does not exist at character 76
2025-03-11 12:01:06 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
		SELECT CID
		FROM Rules."Actions"
		-- CID
		-- WHERE CID = 1
	-- )
2025-03-11 12:01:16 PDT ERROR:  column a.cid does not exist at character 76
2025-03-11 12:01:16 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
		SELECT a.CID
		FROM Rules."Actions" a
		-- CID
		-- WHERE CID = 1
	-- )
2025-03-11 12:02:18 PDT ERROR:  column "ruleid" does not exist at character 75
2025-03-11 12:02:18 PDT HINT:  Perhaps you meant to reference the column "Actions.RuleID".
2025-03-11 12:02:18 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
	SELECT RuleID
	FROM Rules."Actions" 
		-- CID
		-- WHERE CID = 1
	-- )
2025-03-11 12:02:27 PDT ERROR:  missing FROM-clause entry for table "actions" at character 75
2025-03-11 12:02:27 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
	SELECT Actions.RuleID
	FROM Rules."Actions" 
		-- CID
		-- WHERE CID = 1
	-- )
2025-03-11 12:02:31 PDT ERROR:  syntax error at or near "Actions" at character 1
2025-03-11 12:02:31 PDT STATEMENT:  Actions.RuleID
2025-03-11 12:02:35 PDT ERROR:  column "ruleid" does not exist at character 75
2025-03-11 12:02:35 PDT HINT:  Perhaps you meant to reference the column "Actions.RuleID".
2025-03-11 12:02:35 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
	SELECT RuleID
	FROM Rules."Actions" 
		-- CID
		-- WHERE CID = 1
	-- )
2025-03-11 12:02:42 PDT ERROR:  syntax error at or near "RuleID" at character 1
2025-03-11 12:02:42 PDT STATEMENT:  RuleID
2025-03-11 12:02:49 PDT ERROR:  syntax error at or near "RuleID" at character 1
2025-03-11 12:02:49 PDT STATEMENT:  RuleID
2025-03-11 12:02:57 PDT ERROR:  column "ruleid" does not exist at character 75
2025-03-11 12:02:57 PDT HINT:  Perhaps you meant to reference the column "Actions.RuleID".
2025-03-11 12:02:57 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
	SELECT RuleID
	FROM Rules."Actions" 
		-- CID
		-- WHERE CID = 1
	-- )
2025-03-11 12:03:13 PDT ERROR:  missing FROM-clause entry for table "rules" at character 75
2025-03-11 12:03:13 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
	SELECT Rules."Actions.RuleID"
	FROM Rules."Actions" 
		-- CID
		-- WHERE CID = 1
	-- )
2025-03-11 12:03:23 PDT ERROR:  column "r" does not exist at character 75
2025-03-11 12:03:23 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
	SELECT R"Actions.RuleID"
	FROM Rules."Actions" 
		-- CID
		-- WHERE CID = 1
	-- )
2025-03-11 12:03:24 PDT ERROR:  column "Actions.RuleID" does not exist at character 75
2025-03-11 12:03:24 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
	SELECT "Actions.RuleID"
	FROM Rules."Actions" 
		-- CID
		-- WHERE CID = 1
	-- )
2025-03-11 12:03:30 PDT ERROR:  missing FROM-clause entry for table "actions" at character 75
2025-03-11 12:03:30 PDT STATEMENT:  
	-- SELECT *
	-- FROM Rules."Conditions" c
	-- WHERE c."CID" = ANY (
	SELECT Actions."RuleID"
	FROM Rules."Actions" 
		-- CID
		-- WHERE CID = 1
	-- )
2025-03-11 12:07:02 PDT ERROR:  relation "rules.Rules" does not exist at character 16
2025-03-11 12:07:02 PDT STATEMENT:  
	SELECT *
	FROM Rules."Rules" c LEFT JOIN Rules."Actions" a
	ON c."CID" = a."CID";
	-- WHERE c."CID" = ANY (
	-- 	SELECT A."CID"
	-- 	FROM Rules."Actions" A
	-- 	WHERE A."CID" = 1
	-- )
2025-03-11 12:07:05 PDT ERROR:  column c.CID does not exist at character 62
2025-03-11 12:07:05 PDT HINT:  Perhaps you meant to reference the column "a.CID".
2025-03-11 12:07:05 PDT STATEMENT:  
	SELECT *
	FROM Rules."Rule" c LEFT JOIN Rules."Actions" a
	ON c."CID" = a."CID";
	-- WHERE c."CID" = ANY (
	-- 	SELECT A."CID"
	-- 	FROM Rules."Actions" A
	-- 	WHERE A."CID" = 1
	-- )
2025-03-11 12:07:23 PDT ERROR:  column r.CID does not exist at character 62
2025-03-11 12:07:23 PDT HINT:  Perhaps you meant to reference the column "a.CID".
2025-03-11 12:07:23 PDT STATEMENT:  
	SELECT *
	FROM Rules."Rule" r LEFT JOIN Rules."Actions" a
	ON r."CID" = a."CID";
	-- WHERE c."CID" = ANY (
	-- 	SELECT A."CID"
	-- 	FROM Rules."Actions" A
	-- 	WHERE A."CID" = 1
	-- )
2025-03-11 12:09:06 PDT ERROR:  syntax error at or near "EFT" at character 1
2025-03-11 12:09:06 PDT STATEMENT:  EFT 
2025-03-11 12:11:04 PDT ERROR:  syntax error at or near "INNER" at character 1
2025-03-11 12:11:04 PDT STATEMENT:  INNER JOIN Rules."Conditions" c ON c."CID" = ra."CID"
2025-03-11 12:12:45 PDT ERROR:  syntax error at or near ";" at character 89
2025-03-11 12:12:45 PDT STATEMENT:  
	SELECT *
	FROM (
	Rules."Actions" a INNER JOIN  Rules."Conditions" c ON c."CID" = a."CID";
	-- ON r."RuleID" = a."RuleID") ra
	-- JOIN Rules."Conditions" c ON c."CID" = ra."CID"
	-- -- WHERE 
	
2025-03-11 12:16:32 PDT ERROR:  syntax error at or near ";" at character 194
2025-03-11 12:16:32 PDT STATEMENT:  
	
	SELECT * 
	FROM Rules."Rule" r INNER JOIN (
		SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
		FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
		ON c."CID" = a."CID";
	) ac ON r."RuleID" = ac."RuleID" 
	
	
	
	
2025-03-11 12:22:26 PDT ERROR:  syntax error at or near "," at character 802
2025-03-11 12:22:26 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table ("RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID")
	AS $$
	    -- Collect Actions for the rule
	    actions = plpy.execute(
	        f'''
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = {RuleID};
	        '''
	    )
	    RETURN actions
	$$ LANGUAGE plpython3u;
	
	
2025-03-11 12:23:04 PDT ERROR:  syntax error at or near "'RuleID'" at character 794
2025-03-11 12:23:04 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table ('RuleID', 'Name', 'Description', 'Trigger', 'CID', 'LeftSID', 'Operator', 'RightSID')
	AS $$
	    -- Collect Actions for the rule
	    actions = plpy.execute(
	        f'''
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = {RuleID};
	        '''
	    )
	    RETURN actions
	$$ LANGUAGE plpython3u;
	
	
2025-03-11 12:24:39 PDT ERROR:  syntax error at or near "integer" at character 794
2025-03-11 12:24:39 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table( integer 'RuleID', text 'Name', text 'Description', text 'Trigger', integer 'CID', integer 'LeftSID', text 'Operator', integer 'RightSID')
	AS $$
	    -- Collect Actions for the rule
	    actions = plpy.execute(
	        f'''
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = {RuleID};
	        '''
	    )
	    RETURN actions
	$$ LANGUAGE plpython3u;
	
	
2025-03-11 12:25:02 PDT ERROR:  syntax error at or near "integer" at character 794
2025-03-11 12:25:02 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table( integer "RuleID", text "Name", text "Description", text "Trigger", integer "CID", integer "LeftSID", text "Operator", integer "RightSID")
	AS $$
	    -- Collect Actions for the rule
	    actions = plpy.execute(
	        f'''
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = {RuleID};
	        '''
	    )
	    RETURN actions
	$$ LANGUAGE plpython3u;
	
	
2025-03-11 12:26:17 PDT ERROR:  language "plpython3u" does not exist
2025-03-11 12:26:17 PDT HINT:  Use CREATE EXTENSION to load the language into the database.
2025-03-11 12:26:17 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    -- Collect Actions for the rule
	    actions = plpy.execute(
	        f'''
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = {RuleID};
	        '''
	    )
	    RETURN actions
	$$ LANGUAGE plpython3u;
	
	
2025-03-11 12:29:25 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:29:25 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 3)
2025-03-11 12:29:25 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    -- Collect Actions for the rule
	    actions = plpy.execute(
	        f'''
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = {RuleID};
	        '''
	    )
	    RETURN actions
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:30:23 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:30:23 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 3)
2025-03-11 12:30:23 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    -- Collect Actions for the rule
	    actions = plpy.execute(
	        '''
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = {RULE_ID};
	        '''.format(RULE_ID = RuleID)
	    )
	    RETURN actions
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:32:40 PDT LOG:  checkpoint starting: time
2025-03-11 12:32:43 PDT LOG:  checkpoint complete: wrote 25 buffers (0.2%); 0 WAL file(s) added, 0 removed, 0 recycled; write=2.629 s, sync=0.045 s, total=2.700 s; sync files=19, longest=0.011 s, average=0.003 s; distance=90 kB, estimate=463 kB; lsn=0/1CE9068, redo lsn=0/1CE9010
2025-03-11 12:34:27 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:34:27 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 3)
2025-03-11 12:34:27 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    -- Collect Actions for the rule
	    plan = plpy.prepare('''
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        ''', ["text"]
	    )
		
	    RETURN plan.execute([RuleID]);
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:36:03 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:36:03 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 3)
2025-03-11 12:36:03 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    -- Collect Actions for the rule
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["text"]
	    )
		
	    RETURN plan.execute([RuleID]);
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:36:13 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:36:13 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 14)
2025-03-11 12:36:13 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["text"]
	    )
		
	    RETURN plan.execute([RuleID]);
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:37:40 PDT LOG:  checkpoint starting: time
2025-03-11 12:37:41 PDT LOG:  checkpoint complete: wrote 12 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.209 s, sync=0.027 s, total=1.264 s; sync files=9, longest=0.012 s, average=0.003 s; distance=52 kB, estimate=422 kB; lsn=0/1CF60A0, redo lsn=0/1CF6048
2025-03-11 12:38:09 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:38:09 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 14)
2025-03-11 12:38:09 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(RuleID integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	        FROM Rules.Rule r INNER JOIN (
	            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	            ON c.CID = a.CID
	        ) ac ON r.RuleID = ac.RuleID
	        WHERE r.RuleID = $1;
	        """, ["text"]
	    )
		
	    RETURN plan.execute([RuleID]);
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:39:06 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:39:06 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 13)
2025-03-11 12:39:06 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	        FROM Rules.Rule r INNER JOIN (
	            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	            ON c.CID = a.CID
	        ) ac ON r.RuleID = ac.RuleID
	        WHERE r.RuleID = $1;
	        """, ["text"]
	    )
	    RETURN plan.execute([rule_id]);
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:39:10 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:39:10 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 13)
2025-03-11 12:39:10 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	        FROM Rules.Rule r INNER JOIN (
	            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	            ON c.CID = a.CID
	        ) ac ON r.RuleID = ac.RuleID
	        WHERE r.RuleID = $1;
	        """, ["text"]
	    )
	    RETURN plan.execute([rule_id]);
	
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:39:12 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:39:12 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 14)
2025-03-11 12:39:12 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	        FROM Rules.Rule r INNER JOIN (
	            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	            ON c.CID = a.CID
	        ) ac ON r.RuleID = ac.RuleID
	        WHERE r.RuleID = $1;
	        """, ["text"]
	    )
		
	    RETURN plan.execute([rule_id]);
	
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:40:41 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:40:41 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 13)
2025-03-11 12:40:41 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	        FROM Rules.Rule r INNER JOIN (
	            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	            ON c.CID = a.CID
	        ) ac ON r.RuleID = ac.RuleID
	        WHERE r.RuleID = $1;
	        """, ["integer"]
	    )
	    RETURN plan.execute([rule_id]);
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:41:00 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:41:00 PDT DETAIL:  TabError: inconsistent use of tabs and spaces in indentation (<string>, line 13)
2025-03-11 12:41:00 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	        FROM Rules.Rule r INNER JOIN (
	            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	            ON c.CID = a.CID
	        ) ac ON r.RuleID = ac.RuleID
	        WHERE r.RuleID = $1;
	        """, ["integer"]
	    )
		rv = plan.execute([rule_id]);
	    RETURN rv
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:41:06 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:41:06 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 14)
2025-03-11 12:41:06 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	        FROM Rules.Rule r INNER JOIN (
	            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	            ON c.CID = a.CID
	        ) ac ON r.RuleID = ac.RuleID
	        WHERE r.RuleID = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id]);
	    RETURN rv
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:41:48 PDT ERROR:  syntax error at or near "{" at character 1141
2025-03-11 12:41:48 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = {RuleID};
	
	-- CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	-- RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	-- AS $$
	--     plan = plpy.prepare("""
	--         SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	--         FROM Rules.Rule r INNER JOIN (
	--             SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	--             FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	--             ON c.CID = a.CID
	--         ) ac ON r.RuleID = ac.RuleID
	--         WHERE r.RuleID = $1;
	--         """, ["integer"]
	--     )
	--     rv = plan.execute([rule_id]);
	--     RETURN rv
	-- $$ LANGUAGE plpython3u;
	
2025-03-11 12:42:40 PDT LOG:  checkpoint starting: time
2025-03-11 12:42:41 PDT LOG:  checkpoint complete: wrote 11 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.089 s, sync=0.029 s, total=1.141 s; sync files=9, longest=0.012 s, average=0.004 s; distance=40 kB, estimate=384 kB; lsn=0/1D000F8, redo lsn=0/1D00068
2025-03-11 12:42:56 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 12:42:56 PDT DETAIL:  TabError: inconsistent use of tabs and spaces in indentation (<string>, line 15)
2025-03-11 12:42:56 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	        FROM Rules.Rule r INNER JOIN (
	            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	            ON c.CID = a.CID
	        ) ac ON r.RuleID = ac.RuleID
	        WHERE r.RuleID = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id]);
	    return rv
		-- selections =
	$$ LANGUAGE plpython3u;
	
2025-03-11 12:43:25 PDT ERROR:  procedure create_rule_function(integer) does not exist at character 1881
2025-03-11 12:43:25 PDT HINT:  No procedure matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 12:43:25 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	        FROM Rules.Rule r INNER JOIN (
	            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	            ON c.CID = a.CID
	        ) ac ON r.RuleID = ac.RuleID
	        WHERE r.RuleID = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id]);
	    return rv
	$$ LANGUAGE plpython3u;
	
	CALL create_rule_function(1)
	
2025-03-11 12:44:32 PDT ERROR:  spiexceptions.UndefinedTable: relation "rules.rule" does not exist at character 103
2025-03-11 12:44:32 PDT QUERY:  
		        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
		        FROM Rules.Rule r INNER JOIN (
		            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
		            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
		            ON c.CID = a.CID
		        ) ac ON r.RuleID = ac.RuleID
		        WHERE r.RuleID = $1;
		        
2025-03-11 12:44:32 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 2, in <module>
	    plan = plpy.prepare("""
	PL/Python function "create_rule_function"
2025-03-11 12:44:32 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r.RuleID, Name, Description, Trigger, CID, LeftSID, Operator, RightSID
	        FROM Rules.Rule r INNER JOIN (
	            SELECT a.RuleID, a.CID, c.LeftSID, c.Operator, c.RightSID
	            FROM Rules.Actions a INNER JOIN  Rules.Conditions c 
	            ON c.CID = a.CID
	        ) ac ON r.RuleID = ac.RuleID
	        WHERE r.RuleID = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id]);
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT create_rule_function(1)
	
2025-03-11 12:47:40 PDT LOG:  checkpoint starting: time
2025-03-11 12:47:42 PDT LOG:  checkpoint complete: wrote 14 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.417 s, sync=0.029 s, total=1.469 s; sync files=9, longest=0.013 s, average=0.004 s; distance=36 kB, estimate=349 kB; lsn=0/1D09148, redo lsn=0/1D090F0
2025-03-11 13:00:59 PDT ERROR:  plpy.Error: plpy.execute expected a query or a plan
2025-03-11 13:00:59 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 18, in <module>
	    selections[left_sid] = plpy.execute(
	PL/Python function "create_rule_function"
2025-03-11 13:00:59 PDT STATEMENT:  -- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id]);
	    selections = {}
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	           selections[left_sid] = plpy.execute(
	                "SELECT *" +
	                'FROM Rules."Selectors"' +
	                'WHERE SID = $1',
	                [left_sid]
	            )
	           plpy.notice(left_sid)
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 13:02:07 PDT ERROR:  plpy.Error: plpy.execute expected a query or a plan
2025-03-11 13:02:07 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 18, in <module>
	    selections[left_sid] = plpy.execute(
	PL/Python function "create_rule_function"
2025-03-11 13:02:07 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id]);
	    selections = {}
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	           selections[left_sid] = plpy.execute(
	                """SELECT * FROM Rules."Selectors" WHERE SID = $1""",
	                [left_sid]
	            )
	           plpy.notice(left_sid)
	    return rv
	$$ LANGUAGE plpython3u;
	
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id]);
	    selections = {}
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	           selections[left_sid] = plpy.execute(
	                "SELECT *" +
	                'FROM Rules."Selectors"' +
	                'WHERE SID = $1',
	                [left_sid]
	            )
	           plpy.notice(left_sid)
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 13:02:40 PDT LOG:  checkpoint starting: time
2025-03-11 13:02:40 PDT LOG:  checkpoint complete: wrote 5 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.428 s, sync=0.020 s, total=0.470 s; sync files=5, longest=0.012 s, average=0.004 s; distance=24 kB, estimate=316 kB; lsn=0/1D0F1C8, redo lsn=0/1D0F170
2025-03-11 13:02:51 PDT ERROR:  syntax error at or near "for" at character 5
2025-03-11 13:02:51 PDT STATEMENT:      for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	          plpy.notice(left_sid)
	          selections[left_sid] = plpy.execute("""SELECT * FROM Rules."Selectors" WHERE SID = $1""", [left_sid])
	
	    return rv
2025-03-11 13:03:13 PDT ERROR:  plpy.Error: plpy.execute expected a query or a plan
2025-03-11 13:03:13 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 18, in <module>
	    selections[left_sid] = plpy.execute(
	PL/Python function "create_rule_function"
2025-03-11 13:03:13 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	          plpy.notice(left_sid)
	          selections[left_sid] = plpy.execute("""SELECT * FROM Rules."Selectors" WHERE SID = $1""", [left_sid])
	
	    return rv
	$$ LANGUAGE plpython3u;
	
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id]);
	    selections = {}
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	           selections[left_sid] = plpy.execute(
	                "SELECT *" +
	                'FROM Rules."Selectors"' +
	                'WHERE SID = $1',
	                [left_sid]
	            )
	           plpy.notice(left_sid)
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 13:03:58 PDT ERROR:  plpy.Error: plpy.execute expected a query or a plan
2025-03-11 13:03:58 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 18, in <module>
	    selections[left_sid] = plpy.execute(
	PL/Python function "create_rule_function"
2025-03-11 13:03:58 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	          plpy.notice(left_sid)
	          plan = plpy.prepare("""SELECT * FROM Rules."Selectors" WHERE SID = $1""", ["integer"])
	          selections[left_sid] = plan.execute([left_sid])
	    return rv
	$$ LANGUAGE plpython3u;
	
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id]);
	    selections = {}
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	           selections[left_sid] = plpy.execute(
	                "SELECT *" +
	                'FROM Rules."Selectors"' +
	                'WHERE SID = $1',
	                [left_sid]
	            )
	           plpy.notice(left_sid)
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 13:04:07 PDT ERROR:  plpy.Error: plpy.execute expected a query or a plan
2025-03-11 13:04:07 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 18, in <module>
	    selections[left_sid] = plpy.execute(
	PL/Python function "create_rule_function"
2025-03-11 13:04:07 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	          plpy.notice(left_sid)
	          plan = plpy.prepare("""SELECT * FROM Rules."Selectors" WHERE SID = $1""", ["integer"])
	          selections[left_sid] = plan.execute([left_sid])
	    return rv
	$$ LANGUAGE plpython3u;
	
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id]);
	    selections = {}
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	           selections[left_sid] = plpy.execute(
	                "SELECT *" +
	                'FROM Rules."Selectors"' +
	                'WHERE SID = $1',
	                [left_sid]
	            )
	           plpy.notice(left_sid)
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 13:04:23 PDT ERROR:  spiexceptions.UndefinedColumn: column "sid" does not exist at character 39
2025-03-11 13:04:23 PDT QUERY:  SELECT * FROM Rules."Selectors" WHERE SID = $1
2025-03-11 13:04:23 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 19, in <module>
	    plan = plpy.prepare("""SELECT * FROM Rules."Selectors" WHERE SID = $1""", ["integer"])
	PL/Python function "create_rule_function"
2025-03-11 13:04:23 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	          plpy.notice(left_sid)
	          plan = plpy.prepare("""SELECT * FROM Rules."Selectors" WHERE SID = $1""", ["integer"])
	          selections[left_sid] = plan.execute([left_sid])
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 13:05:33 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 13:05:33 PDT DETAIL:  TabError: inconsistent use of tabs and spaces in indentation (<string>, line 15)
2025-03-11 13:05:33 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
		plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	          plpy.notice(left_sid)
	          selections[left_sid] = plan.execute([left_sid])
	       if right_sid not in selections:
	          plpy.notice(right_sid)
	          selections[right_sid] = plan.execute([right_sid])
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 13:06:42 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 13:06:42 PDT DETAIL:  IndentationError: unindent does not match any outer indentation level (<string>, line 25)
2025-03-11 13:06:42 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	    for rule in rv:
	       left_sid = rule["LeftSID"]
	       right_sid = rule["RightSID"]
	       if left_sid not in selections:
	          plpy.notice(left_sid)
	          selections[left_sid] = plan.execute([left_sid])
	       if right_sid not in selections:
	          plpy.notice(right_sid)
	          selections[right_sid] = plan.execute([right_sid])
		plpy.info(selections)
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 13:07:40 PDT LOG:  checkpoint starting: time
2025-03-11 13:07:41 PDT LOG:  checkpoint complete: wrote 9 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.867 s, sync=0.028 s, total=0.917 s; sync files=8, longest=0.013 s, average=0.004 s; distance=46 kB, estimate=289 kB; lsn=0/1D1ACF8, redo lsn=0/1D1ACA0
2025-03-11 13:11:24 PDT ERROR:  NameError: name 'right_side' is not defined
2025-03-11 13:11:24 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 27, in <module>
	    plpy.notice(right_side, r)
	PL/Python function "create_rule_function"
2025-03-11 13:11:24 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	    for rule in rv:
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        if left_sid not in selections:
	            result = plan.execute([left_sid])
	            selections[left_sid] = result
	            for r in result:
	                plpy.notice(left_sid, r)
	        if right_sid not in selections:
	            result = plan.execute([right_sid])
	            selections[right_sid] = result
	            for r in result:
	                plpy.notice(right_side, r)
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 13:12:40 PDT LOG:  checkpoint starting: time
2025-03-11 13:12:41 PDT LOG:  checkpoint complete: wrote 8 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.759 s, sync=0.024 s, total=0.807 s; sync files=7, longest=0.012 s, average=0.004 s; distance=40 kB, estimate=264 kB; lsn=0/1D24F58, redo lsn=0/1D24F00
2025-03-11 13:23:07 PDT ERROR:  TypeError: list indices must be integers or slices, not str
2025-03-11 13:23:07 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 24, in <module>
	    if selections[left_sid]['Schema'] == None:
	PL/Python function "create_rule_function"
2025-03-11 13:23:07 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    selectors_sql = []
	    plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	    for rule in rv:
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        if left_sid not in selections:
	            result = plan.execute([left_sid])
	            selections[left_sid] = result
	            for r in result:
	                plpy.notice(left_sid, r)
	        if selections[left_sid]['Schema'] == None:
	            left_sql = f"SELECT {selections[left_sid]["Aggregator"]}({selections[left_sid]["Target"]})"
	            plpy.notice(left_sql)
	        else:
	            left_sql = f"SELECT "
	        if right_sid not in selections:
	            result = plan.execute([right_sid])
	            selections[right_sid] = result
	            for r in result:
	                plpy.notice(right_sid, r)
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 13:27:40 PDT LOG:  checkpoint starting: time
2025-03-11 13:27:40 PDT LOG:  checkpoint complete: wrote 5 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.430 s, sync=0.020 s, total=0.465 s; sync files=5, longest=0.012 s, average=0.004 s; distance=27 kB, estimate=241 kB; lsn=0/1D2BBE8, redo lsn=0/1D2BB90
2025-03-11 13:32:40 PDT LOG:  checkpoint starting: time
2025-03-11 13:32:41 PDT LOG:  checkpoint complete: wrote 5 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.431 s, sync=0.020 s, total=0.478 s; sync files=5, longest=0.012 s, average=0.004 s; distance=25 kB, estimate=219 kB; lsn=0/1D32280, redo lsn=0/1D32228
2025-03-11 13:36:19 PDT ERROR:  UnboundLocalError: cannot access local variable 'idx' where it is not associated with a value
2025-03-11 13:36:19 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 29, in <module>
	    temp_id = f'{selections[left_sid]["Target"]}{idx}'
	PL/Python function "create_rule_function"
2025-03-11 13:36:19 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    selectors_sql = []
	    plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	    for rule in rv:
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        if left_sid not in selections:
	            result = plan.execute([left_sid])
	            if len(result) == 0:
	                raise ValueError
	            selections[left_sid] = result[0]
	            plpy.notice(left_sid, result[0])
	        if selections[left_sid]['Schema'] == None:
	            left_sql = f"SELECT {selections[left_sid]["Aggregator"]}({selections[left_sid]["Target"]})"
	            plpy.notice(left_sql)
	        else:
	            temp_id = f'{selections[left_sid]["Target"]}{idx}'
	            table = f'{selections[left_sid]["Schema"]}."{selections[left_sid]["Table"]}"'
	            idx = idx + 1
	            left_sql = f'''
	            SELECT {selections[left_sid]["Aggregator"]}({temp_id}."{selections[left_sid]["Target"]}")
	            FROM {table}
	            '''
	            plpy.notice(left_sql)
	
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 13:37:40 PDT LOG:  checkpoint starting: time
2025-03-11 13:37:41 PDT LOG:  checkpoint complete: wrote 8 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.774 s, sync=0.026 s, total=0.815 s; sync files=7, longest=0.015 s, average=0.004 s; distance=41 kB, estimate=201 kB; lsn=0/1D3C6E8, redo lsn=0/1D3C658
2025-03-11 13:42:40 PDT LOG:  checkpoint starting: time
2025-03-11 13:42:42 PDT LOG:  checkpoint complete: wrote 18 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.865 s, sync=0.034 s, total=1.915 s; sync files=12, longest=0.012 s, average=0.003 s; distance=76 kB, estimate=189 kB; lsn=0/1D4F778, redo lsn=0/1D4F720
2025-03-11 13:45:13 PDT ERROR:  syntax error at or near "1" at character 370
2025-03-11 13:45:13 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	
	SELECT 1 FROM 1 WHERE 1=1
	
	
2025-03-11 13:45:24 PDT ERROR:  syntax error at or near ")" at character 371
2025-03-11 13:45:24 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	
	SELECT 1 FROM () WHERE 1=1
	
	
2025-03-11 13:51:14 PDT ERROR:  syntax error at or near "AND" at character 166
2025-03-11 13:51:14 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Actions"
	    ALTER COLUMN "CID" SET NOT NULL;
	
	ALTER TABLE IF EXISTS rules."Actions"
	    ADD COLUMN "Conjunction" text NOT NULL DEFAULT AND;
2025-03-11 13:51:20 PDT ERROR:  syntax error at or near "AND" at character 157
2025-03-11 13:51:20 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Actions"
	    ALTER COLUMN "CID" SET NOT NULL;
	
	ALTER TABLE IF EXISTS rules."Actions"
	    ADD COLUMN "Conjunction" text DEFAULT AND;
2025-03-11 13:51:28 PDT ERROR:  syntax error at or near "AND" at character 81
2025-03-11 13:51:28 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Actions"
	    ADD COLUMN "Conjunction" text DEFAULT AND;
2025-03-11 13:52:13 PDT ERROR:  syntax error at or near "AND" at character 82
2025-03-11 13:52:13 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Actions"
	    ALTER COLUMN "Conjunction" SET DEFAULT AND;
	
	ALTER TABLE IF EXISTS rules."Actions"
	    ALTER COLUMN "Conjunction" SET NOT NULL;
2025-03-11 13:52:17 PDT ERROR:  column "Conjunction" of relation "Actions" contains null values
2025-03-11 13:52:17 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Actions"
	    ALTER COLUMN "Conjunction" SET NOT NULL;
2025-03-11 13:52:40 PDT LOG:  checkpoint starting: time
2025-03-11 13:52:42 PDT LOG:  checkpoint complete: wrote 24 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=2.521 s, sync=0.047 s, total=2.584 s; sync files=20, longest=0.013 s, average=0.003 s; distance=100 kB, estimate=180 kB; lsn=0/1D688B0, redo lsn=0/1D68858
2025-03-11 13:54:57 PDT ERROR:  syntax error at or near "AND" at character 82
2025-03-11 13:54:57 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Actions"
	    ALTER COLUMN "Conjunction" SET DEFAULT AND;
	
	ALTER TABLE IF EXISTS rules."Actions"
	    ALTER COLUMN "Conjunction" SET NOT NULL;
2025-03-11 13:55:08 PDT ERROR:  syntax error at or near "AND" at character 82
2025-03-11 13:55:08 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Actions"
	    ALTER COLUMN "Conjunction" SET DEFAULT AND;
2025-03-11 13:57:40 PDT LOG:  checkpoint starting: time
2025-03-11 13:57:41 PDT LOG:  checkpoint complete: wrote 9 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.870 s, sync=0.025 s, total=0.917 s; sync files=9, longest=0.011 s, average=0.003 s; distance=32 kB, estimate=165 kB; lsn=0/1D70A50, redo lsn=0/1D709F8
2025-03-11 13:58:07 PDT ERROR:  column "conjunction" does not exist
2025-03-11 13:58:07 PDT HINT:  Perhaps you meant to reference the column "Actions.Conjunction".
2025-03-11 13:58:07 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Actions"
	    ADD CONSTRAINT "ConjunctionCheck" CHECK (Conjunction IN ('AND', 'OR'))
	    NOT VALID;
2025-03-11 13:58:15 PDT ERROR:  column "conjunction" does not exist
2025-03-11 13:58:15 PDT HINT:  Perhaps you meant to reference the column "Actions.Conjunction".
2025-03-11 13:58:15 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Actions"
	    ADD CONSTRAINT "ConjunctionCheck" CHECK (Conjunction IN ('AND', 'OR'))
	    NOT VALID;
2025-03-11 13:58:29 PDT ERROR:  missing FROM-clause entry for table "actions"
2025-03-11 13:58:29 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Actions"
	    ADD CONSTRAINT "ConjunctionCheck" CHECK (Actions."Conjunction" IN ('AND', 'OR'))
	    NOT VALID;
2025-03-11 14:02:40 PDT LOG:  checkpoint starting: time
2025-03-11 14:02:42 PDT LOG:  checkpoint complete: wrote 16 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.633 s, sync=0.037 s, total=1.692 s; sync files=13, longest=0.012 s, average=0.003 s; distance=65 kB, estimate=155 kB; lsn=0/1D81238, redo lsn=0/1D811A8
2025-03-11 14:02:48 PDT ERROR:  cannot change return type of existing function
2025-03-11 14:02:48 PDT DETAIL:  Row type defined by OUT parameters is different.
2025-03-11 14:02:48 PDT HINT:  Use DROP FUNCTION create_rule_function(integer) first.
2025-03-11 14:02:48 PDT STATEMENT:  CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    selectors_sql = []
	    plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	    temp_idx = 0
	    for rule in rv:
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        if left_sid not in selections:
	            result = plan.execute([left_sid])
	            if len(result) == 0:
	                raise ValueError
	            selections[left_sid] = result[0]
	        if selections[left_sid]['Schema'] == None:
	            left_sql = f"SELECT {selections[left_sid]["Aggregator"]}({selections[left_sid]["Target"]})"
	        else:
	            temp_id = f'{selections[left_sid]["Target"]}{temp_idx}'
	            table = f'{selections[left_sid]["Schema"]}."{selections[left_sid]["Table"]}"'
	            temp_idx = temp_idx + 1
	            left_sql = f'''
	            SELECT {selections[left_sid]["Aggregator"]}({temp_id}."{selections[left_sid]["Target"]}")
	            FROM {table} {temp_id}
	            '''
	        plpy.notice(left_sid, selections[left_sid], left_sql)
	
	
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 14:03:11 PDT ERROR:  key "Conjunction" not found in mapping
2025-03-11 14:03:11 PDT HINT:  To return null in a column, add the value None to the mapping with the key named after the column.
2025-03-11 14:03:11 PDT CONTEXT:  while creating return value
	PL/Python function "create_rule_function"
2025-03-11 14:03:11 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    selectors_sql = []
	    plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	    temp_idx = 0
	    for rule in rv:
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        if left_sid not in selections:
	            result = plan.execute([left_sid])
	            if len(result) == 0:
	                raise ValueError
	            selections[left_sid] = result[0]
	        if selections[left_sid]['Schema'] == None:
	            left_sql = f"SELECT {selections[left_sid]["Aggregator"]}({selections[left_sid]["Target"]})"
	        else:
	            temp_id = f'{selections[left_sid]["Target"]}{temp_idx}'
	            table = f'{selections[left_sid]["Schema"]}."{selections[left_sid]["Table"]}"'
	            temp_idx = temp_idx + 1
	            left_sql = f'''
	            SELECT {selections[left_sid]["Aggregator"]}({temp_id}."{selections[left_sid]["Target"]}")
	            FROM {table} {temp_id}
	            '''
	        plpy.notice(left_sid, selections[left_sid], left_sql)
	
	
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 14:03:35 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 14:03:35 PDT DETAIL:  TabError: inconsistent use of tabs and spaces in indentation (<string>, line 19)
2025-03-11 14:03:35 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    selectors_sql = []
	    plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	    temp_idx = 0
	    for rule in rv:
			plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        if left_sid not in selections:
	            result = plan.execute([left_sid])
	            if len(result) == 0:
	                raise ValueError
	            selections[left_sid] = result[0]
	        if selections[left_sid]['Schema'] == None:
	            left_sql = f"SELECT {selections[left_sid]["Aggregator"]}({selections[left_sid]["Target"]})"
	        else:
	            temp_id = f'{selections[left_sid]["Target"]}{temp_idx}'
	            table = f'{selections[left_sid]["Schema"]}."{selections[left_sid]["Table"]}"'
	            temp_idx = temp_idx + 1
	            left_sql = f'''
	            SELECT {selections[left_sid]["Aggregator"]}({temp_id}."{selections[left_sid]["Target"]}")
	            FROM {table} {temp_id}
	            '''
	        plpy.notice(left_sid, selections[left_sid], left_sql)
	
	
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 14:03:44 PDT ERROR:  key "Conjunction" not found in mapping
2025-03-11 14:03:44 PDT HINT:  To return null in a column, add the value None to the mapping with the key named after the column.
2025-03-11 14:03:44 PDT CONTEXT:  while creating return value
	PL/Python function "create_rule_function"
2025-03-11 14:03:44 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    selections = {}
	    selectors_sql = []
	    plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	    temp_idx = 0
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        if left_sid not in selections:
	            result = plan.execute([left_sid])
	            if len(result) == 0:
	                raise ValueError
	            selections[left_sid] = result[0]
	        if selections[left_sid]['Schema'] == None:
	            left_sql = f"SELECT {selections[left_sid]["Aggregator"]}({selections[left_sid]["Target"]})"
	        else:
	            temp_id = f'{selections[left_sid]["Target"]}{temp_idx}'
	            table = f'{selections[left_sid]["Schema"]}."{selections[left_sid]["Table"]}"'
	            temp_idx = temp_idx + 1
	            left_sql = f'''
	            SELECT {selections[left_sid]["Aggregator"]}({temp_id}."{selections[left_sid]["Target"]}")
	            FROM {table} {temp_id}
	            '''
	        plpy.notice(left_sid, selections[left_sid], left_sql)
	
	
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 14:07:19 PDT ERROR:  UnboundLocalError: cannot access local variable 'temp_idx' where it is not associated with a value
2025-03-11 14:07:19 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 39, in <module>
	    cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	  PL/Python function "create_rule_function", line 13, in build_subquery
	    temp_id = f'{cached_selections[sid]["Target"]}{temp_idx}'
	PL/Python function "create_rule_function"
2025-03-11 14:07:19 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    temp_idx = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]})"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{temp_idx}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            temp_idx = temp_idx + 1
	            subquery = f'''
	            SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}")
	            FROM {table} {temp_id}
	            '''
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = ["TRUE"]
	    cached_selections = {}
	    for rule in rv:
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} (SELECT {left_subquery} {rule["Operator"]} {right_subquery})"
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 14:07:40 PDT LOG:  checkpoint starting: time
2025-03-11 14:07:41 PDT LOG:  checkpoint complete: wrote 7 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.651 s, sync=0.024 s, total=0.698 s; sync files=7, longest=0.012 s, average=0.004 s; distance=50 kB, estimate=145 kB; lsn=0/1D8DDD0, redo lsn=0/1D8DD78
2025-03-11 14:08:56 PDT ERROR:  KeyError: 'Conjunction'
2025-03-11 14:08:56 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 42, in <module>
	    result = f"{rule["Conjunction"]} (SELECT {left_subquery} {rule["Operator"]} {right_subquery})"
	PL/Python function "create_rule_function"
2025-03-11 14:08:56 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]})"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''
	            SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}")
	            FROM {table} {temp_id}
	            '''
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = ["TRUE"]
	    cached_selections = {}
	    for rule in rv:
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} (SELECT {left_subquery} {rule["Operator"]} {right_subquery})"
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 14:09:38 PDT ERROR:  key "Conjunction" not found in mapping
2025-03-11 14:09:38 PDT HINT:  To return null in a column, add the value None to the mapping with the key named after the column.
2025-03-11 14:09:38 PDT CONTEXT:  while creating return value
	PL/Python function "create_rule_function"
2025-03-11 14:09:38 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]})"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''
	            SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}")
	            FROM {table} {temp_id}
	            '''
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = ["TRUE"]
	    cached_selections = {}
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f" (SELECT {left_subquery} {rule["Operator"]} {right_subquery})"
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	-- SELECT * 
	-- FROM rules."Conditions" c
	-- WHERE c.CID = ANY(
	-- 	SELECT a.CID 
	-- 	FROM rules."Actions" a 
	-- 	WHERE a.RuleID = c.CID
	-- )
	-- SELECT *
	-- FROM rules."Actions" a;
	-- -- WHERE a.RuleID = c.CID
	
	
	-- INSERT INTO rules."Rule" ("Name", "Description", "Trigger")
	-- VALUES
	--     	('Rule 1','Test 1 RULE', '1someTrigger'),
	-- 		('Rule 2','Test 2 RULE', '2someTrigger');
	
	
	-- INSERT INTO rules."Actions" ("RuleID", "CID")
	-- VALUES
	-- 	(1,1),
	-- 	(1,2);
	
	-- INSERT INTO rules."Conditions" ("LeftSID", "Operator", "RightSID")
	-- VALUES
	-- 	(1,'=',2),
	-- 	(3,'=',1);
	
	-- SELECT * FROM rules."Conditions";
	-- SELECT * FROM rules."Actions";
	-- SELECT * FROM rules."Rule"
	-- SELECT * FROM rules."Selectors";
	-- CREATE EXTENSION plpython3u;
	
	        -- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	        -- FROM Rules."Rule" r INNER JOIN (
	        --     SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	        --     FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	        --     ON c."CID" = a."CID"
	        -- ) ac ON r."RuleID" = ac."RuleID"
	        -- WHERE r."RuleID" = 1;
	
	
	
2025-03-11 14:12:40 PDT LOG:  checkpoint starting: time
2025-03-11 14:12:40 PDT LOG:  checkpoint complete: wrote 7 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.660 s, sync=0.023 s, total=0.711 s; sync files=7, longest=0.012 s, average=0.004 s; distance=45 kB, estimate=135 kB; lsn=0/1D99558, redo lsn=0/1D99500
2025-03-11 14:17:40 PDT LOG:  checkpoint starting: time
2025-03-11 14:17:41 PDT LOG:  checkpoint complete: wrote 9 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.872 s, sync=0.026 s, total=0.924 s; sync files=8, longest=0.012 s, average=0.004 s; distance=40 kB, estimate=125 kB; lsn=0/1DA3768, redo lsn=0/1DA3710
2025-03-11 14:22:40 PDT LOG:  checkpoint starting: time
2025-03-11 14:22:41 PDT LOG:  checkpoint complete: wrote 11 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.095 s, sync=0.030 s, total=1.148 s; sync files=11, longest=0.012 s, average=0.003 s; distance=45 kB, estimate=117 kB; lsn=0/1DAEEF8, redo lsn=0/1DAEEA0
2025-03-11 14:30:54 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 14:30:54 PDT DETAIL:  IndentationError: unexpected indent (<string>, line 4)
2025-03-11 14:30:54 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	 SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]})"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''
	            SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}")
	            FROM {table} {temp_id};
	            '''.replace("\t","").replace("\n", " ")
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"].replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT ({left_subquery} {rule["Operator"]} {right_subquery});)".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    CREATE OR REPLACE FUNCTION func_{rule_name}(rule_id integer) RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN 'SELECT TRUE {actions_str}';
	    """
	    plpy.notice(rule_sql)
	   
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 14:32:15 PDT ERROR:  spiexceptions.UndefinedFunction: could not find a function named "func_rule_1"
2025-03-11 14:32:15 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 55, in <module>
	    plpy.execute(rule_sql)
	PL/Python function "create_rule_function"
2025-03-11 14:32:15 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]})"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''
	            SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}")
	            FROM {table} {temp_id};
	            '''.replace("\t","").replace("\n", " ")
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"].replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT ({left_subquery} {rule["Operator"]} {right_subquery}))".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}(rule_id integer) RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN 'SELECT TRUE {actions_str}';
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	   
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 14:32:40 PDT LOG:  checkpoint starting: time
2025-03-11 14:32:41 PDT LOG:  checkpoint complete: wrote 8 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.766 s, sync=0.026 s, total=0.810 s; sync files=7, longest=0.013 s, average=0.004 s; distance=40 kB, estimate=109 kB; lsn=0/1DB9050, redo lsn=0/1DB8FC0
2025-03-11 14:32:52 PDT ERROR:  spiexceptions.InvalidFunctionDefinition: return type mismatch in function declared to return boolean
2025-03-11 14:32:52 PDT DETAIL:  Actual return type is text.
2025-03-11 14:32:52 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 55, in <module>
	    plpy.execute(rule_sql)
	PL/Python function "create_rule_function"
2025-03-11 14:32:52 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]})"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''
	            SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}")
	            FROM {table} {temp_id};
	            '''.replace("\t","").replace("\n", " ")
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"].replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT ({left_subquery} {rule["Operator"]} {right_subquery}))".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION IF EXISTS func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}(rule_id integer) RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN 'SELECT TRUE {actions_str}';
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	   
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 14:33:34 PDT ERROR:  spiexceptions.InvalidFunctionDefinition: return type mismatch in function declared to return boolean
2025-03-11 14:33:34 PDT DETAIL:  Actual return type is text.
2025-03-11 14:33:34 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 56, in <module>
	    plpy.execute(rule_sql)
	PL/Python function "create_rule_function"
2025-03-11 14:33:34 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]})"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''
	            SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}")
	            FROM {table} {temp_id};
	            '''.replace("\t","").replace("\n", " ")
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"]
	    rule_name = rule_name.replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT ({left_subquery} {rule["Operator"]} {right_subquery}))".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION IF EXISTS func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}(rule_id integer) RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN 'SELECT TRUE {actions_str}';
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	   
	    return rv
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 14:34:20 PDT ERROR:  spiexceptions.SyntaxError: syntax error at or near "SELECT" at character 183
2025-03-11 14:34:20 PDT QUERY:  
		    DROP FUNCTION IF EXISTS func_rule_1;
		    CREATE OR REPLACE FUNCTION func_rule_1(rule_id integer) RETURNS boolean
		    LANGUAGE SQL
		    RETURNS NULL ON NULL INPUT
		    RETURN SELECT TRUE  AND ( SELECT (    SELECT SUM(Amount0."Amount")    FROM test."Transaction" Amount0;     > SELECT MAX(1))) AND ( SELECT (    SELECT SUM(Amount1."Amount")    FROM test."Transaction" Amount1;     = SELECT MAX(1)));
		    
2025-03-11 14:34:20 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 56, in <module>
	    plpy.execute(rule_sql)
	PL/Python function "create_rule_function"
2025-03-11 14:34:20 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]})"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''
	            SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}")
	            FROM {table} {temp_id};
	            '''.replace("\t","").replace("\n", " ")
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"]
	    rule_name = rule_name.replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT ({left_subquery} {rule["Operator"]} {right_subquery}))".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION IF EXISTS func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}(rule_id integer) RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN SELECT TRUE {actions_str};
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	   
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 14:36:25 PDT ERROR:  syntax error at or near "RETURN" at character 356
2025-03-11 14:36:25 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	 RETURN SELECT TRUE 
	 AND (
	 	SELECT (
			SELECT SUM(Amount0."Amount")
		 	FROM test."Transaction" Amount0 > SELECT MAX(1)
		 )
	 ) AND (
	 	SELECT (
			SELECT SUM(Amount1."Amount")
			FROM test."Transaction" Amount1= SELECT MAX(1))
	)
	
2025-03-11 14:36:33 PDT ERROR:  syntax error at or near "RETURN" at character 356
2025-03-11 14:36:33 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	 RETURN SELECT true 
	 AND (
	 	SELECT (
			SELECT SUM(Amount0."Amount")
		 	FROM test."Transaction" Amount0 > SELECT MAX(1)
		 )
	 ) AND (
	 	SELECT (
			SELECT SUM(Amount1."Amount")
			FROM test."Transaction" Amount1= SELECT MAX(1))
	)
	
2025-03-11 14:36:35 PDT ERROR:  syntax error at or near "RETURN" at character 356
2025-03-11 14:36:35 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	 RETURN SELECT 1 
	 AND (
	 	SELECT (
			SELECT SUM(Amount0."Amount")
		 	FROM test."Transaction" Amount0 > SELECT MAX(1)
		 )
	 ) AND (
	 	SELECT (
			SELECT SUM(Amount1."Amount")
			FROM test."Transaction" Amount1= SELECT MAX(1))
	)
	
2025-03-11 14:36:43 PDT ERROR:  syntax error at or near ">" at character 451
2025-03-11 14:36:43 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	SELECT TRUE
	 AND (
	 	SELECT (
			SELECT SUM(Amount0."Amount")
		 	FROM test."Transaction" Amount0 > SELECT MAX(1)
		 )
	 ) AND (
	 	SELECT (
			SELECT SUM(Amount1."Amount")
			FROM test."Transaction" Amount1= SELECT MAX(1))
	)
	
2025-03-11 14:37:01 PDT ERROR:  syntax error at or near "1" at character 1
2025-03-11 14:37:01 PDT STATEMENT:  1
2025-03-11 14:37:25 PDT ERROR:  syntax error at or near ">" at character 451
2025-03-11 14:37:25 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	SELECT TRUE
	 AND (
	 	SELECT (
			SELECT SUM(Amount0."Amount")
		 	FROM test."Transaction" Amount0 > SELECT MAX((SELECT 1))
		 )
	 ) AND (
	 	SELECT (
			SELECT SUM(Amount1."Amount")
			FROM test."Transaction" Amount1= SELECT MAX((SELECT 1))
	)
	
2025-03-11 14:37:31 PDT ERROR:  syntax error at or near ">" at character 451
2025-03-11 14:37:31 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	SELECT TRUE
	 AND (
	 	SELECT (
			SELECT SUM(Amount0."Amount")
		 	FROM test."Transaction" Amount0 > SELECT MAX(SELECT 1)
		 )
	 ) AND (
	 	SELECT (
			SELECT SUM(Amount1."Amount")
			FROM test."Transaction" Amount1= SELECT MAX(SELECT 1)
	)
	
2025-03-11 14:37:40 PDT LOG:  checkpoint starting: time
2025-03-11 14:37:41 PDT LOG:  checkpoint complete: wrote 11 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.988 s, sync=0.025 s, total=1.026 s; sync files=8, longest=0.011 s, average=0.004 s; distance=51 kB, estimate=104 kB; lsn=0/1DC5E80, redo lsn=0/1DC5E28
2025-03-11 14:37:44 PDT ERROR:  syntax error at or near "SELECT" at character 12
2025-03-11 14:37:44 PDT STATEMENT:  SELECT MAX(SELECT 1)
2025-03-11 14:38:23 PDT ERROR:  syntax error at or near ">" at character 694
2025-03-11 14:38:23 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
	SELECT SUM(Amount0."Amount")
	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	)
2025-03-11 14:38:31 PDT ERROR:  syntax error at or near ">" at character 694
2025-03-11 14:38:31 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
	SELECT SUM(Amount0."Amount")
	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1;))
	)
2025-03-11 14:38:34 PDT ERROR:  syntax error at or near ">" at character 694
2025-03-11 14:38:34 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
	SELECT SUM(Amount0."Amount")
	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1;);)
	)
2025-03-11 14:39:05 PDT ERROR:  syntax error at or near "SELECT" at character 697
2025-03-11 14:39:05 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
	SELECT SUM(Amount0."Amount")
	FROM test."Transaction" Amount0) > SELECT MAX(SELECT 1)
2025-03-11 14:39:23 PDT ERROR:  syntax error at or near "SELECT" at character 701
2025-03-11 14:39:23 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transaction" Amount0
		) > SELECT MAX(SELECT 1)
2025-03-11 14:39:37 PDT ERROR:  relation "test.Transaction" does not exist at character 772
2025-03-11 14:39:37 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	-- SELECT (
	-- 	SELECT SUM(Amount0."Amount")
	-- 	FROM test."Transaction" Amount0
	-- 	) > SELECT MAX(SELECT 1)
	
			SELECT SUM(Amount0."Amount")
		FROM test."Transaction" Amount0
2025-03-11 14:40:10 PDT ERROR:  syntax error at or near "SELECT" at character 702
2025-03-11 14:40:10 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transactions" Amount0
		) > SELECT MAX(SELECT 1)
	
	-- SELECT SUM(Amount0."Amount")
	-- FROM test."Transactions" Amount0
2025-03-11 14:40:18 PDT ERROR:  syntax error at end of input at character 108
2025-03-11 14:40:18 PDT STATEMENT:  SELECT (
	-- 	SELECT SUM(Amount0."Amount")
	-- 	FROM test."Transactions" Amount0
	-- 	) > SELECT MAX(SELECT 1)
2025-03-11 14:40:29 PDT ERROR:  missing FROM-clause entry for table "amount0" at character 12
2025-03-11 14:40:29 PDT STATEMENT:  SELECT SUM(Amount0."Amount")
	-- FROM test."Transactions" Amount0
2025-03-11 14:40:34 PDT ERROR:  syntax error at or near "SELECT" at character 702
2025-03-11 14:40:34 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transactions" Amount0
		) > SELECT MAX(SELECT 1);
	
	-- SELECT SUM(Amount0."Amount")
	-- FROM test."Transactions" Amount0
2025-03-11 14:40:39 PDT ERROR:  syntax error at or near "SELECT" at character 702
2025-03-11 14:40:39 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transactions" Amount0
		) > SELECT MAX(SELECT 1);
	
	
2025-03-11 14:41:12 PDT ERROR:  syntax error at or near "SELECT" at character 703
2025-03-11 14:41:12 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transactions" Amount0
		)
		> SELECT MAX(SELECT 1);
	
	
2025-03-11 14:41:21 PDT ERROR:  syntax error at or near "SELECT" at character 703
2025-03-11 14:41:21 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transactions" Amount0
		)
		> SELECT (MAX(SELECT 1));
	
	
2025-03-11 14:41:26 PDT ERROR:  syntax error at or near "SELECT" at character 703
2025-03-11 14:41:26 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transactions" Amount0
		)
		> SELECT (1);
	
	
2025-03-11 14:41:30 PDT ERROR:  syntax error at or near "SELECT" at character 703
2025-03-11 14:41:30 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transactions" Amount0
		)
		> SELECT 1;
	
	
2025-03-11 14:41:47 PDT ERROR:  operator does not exist: money > integer at character 701
2025-03-11 14:41:47 PDT HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 14:41:47 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transactions" Amount0
		)
		> (SELECT 100000000);
	
	
2025-03-11 14:42:11 PDT ERROR:  syntax error at or near "SELECT" at character 707
2025-03-11 14:42:11 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transactions" Amount0
		)
		> MAX(SELECT 100000000);
	
	
2025-03-11 14:42:12 PDT ERROR:  syntax error at or near "SELECT" at character 707
2025-03-11 14:42:12 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT (
		SELECT SUM(Amount0."Amount")
		FROM test."Transactions" Amount0
		)
		> MAX(SELECT 100000000);
	
	
2025-03-11 14:42:20 PDT ERROR:  syntax error at end of input at character 85
2025-03-11 14:42:20 PDT STATEMENT:  (
	-- 	SELECT SUM(Amount0."Amount")
	-- 	FROM test."Transactions" Amount0
	-- 	)
	-- 	> 
2025-03-11 14:42:20 PDT ERROR:  syntax error at end of input at character 85
2025-03-11 14:42:20 PDT STATEMENT:  (
	-- 	SELECT SUM(Amount0."Amount")
	-- 	FROM test."Transactions" Amount0
	-- 	)
	-- 	> 
2025-03-11 14:42:24 PDT ERROR:  syntax error at or near "SELECT" at character 635
2025-03-11 14:42:24 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT MAX(SELECT 100000000);
	
	-- (
	-- 	SELECT SUM(Amount0."Amount")
	-- 	FROM test."Transactions" Amount0
	-- 	)
	-- 	
2025-03-11 14:42:29 PDT ERROR:  syntax error at or near "SELECT" at character 635
2025-03-11 14:42:29 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	SELECT MAX(SELECT 100000000)
	
	
	-- 	SELECT SUM(Amount0."Amount")
	-- 	FROM test."Transactions" Amount0
	
	-- 	
2025-03-11 14:43:24 PDT ERROR:  syntax error at or near ">" at character 697
2025-03-11 14:43:24 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT ( SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0 > SELECT SUM(100000000))
		
	
	-- 	
2025-03-11 14:43:55 PDT ERROR:  syntax error at or near "WHERE" at character 637
2025-03-11 14:43:55 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT ( 1
	WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) > SELECT SUM(100000000)
		
	
	-- 	
2025-03-11 14:44:04 PDT ERROR:  syntax error at or near "SELECT" at character 707
2025-03-11 14:44:04 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT 1
	WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) > SELECT SUM(100000000)
		
	
	-- 	
2025-03-11 14:44:18 PDT ERROR:  syntax error at or near "SELECT" at character 707
2025-03-11 14:44:18 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT 1
	WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = SELECT SUM(100000000)
		
	
	-- 	
2025-03-11 14:44:18 PDT ERROR:  syntax error at or near "SELECT" at character 707
2025-03-11 14:44:18 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT 1
	WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = SELECT SUM(100000000)
		
	
	-- 	
2025-03-11 14:44:21 PDT ERROR:  syntax error at or near "SELECT" at character 707
2025-03-11 14:44:21 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT 1
	WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = SELECT SUM(100000000);
		
	
	-- 	
2025-03-11 14:44:24 PDT ERROR:  syntax error at or near "SELECT" at character 707
2025-03-11 14:44:24 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT 1 WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = SELECT SUM(100000000);
		
	
	-- 	
2025-03-11 14:44:40 PDT ERROR:  syntax error at or near "SELECT" at character 723
2025-03-11 14:44:40 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT 1 FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = SELECT SUM(100000000);
		
	
	-- 	
2025-03-11 14:45:06 PDT ERROR:  syntax error at or near "SELECT" at character 662
2025-03-11 14:45:06 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE 1=SELECT SUM(100000000);
		
	-- SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = SELECT SUM(100000000);
	-- 	
2025-03-11 14:46:03 PDT ERROR:  operator does not exist: money = bigint at character 724
2025-03-11 14:46:03 PDT HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 14:46:03 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:46:13 PDT ERROR:  operator does not exist: money = bigint at character 724
2025-03-11 14:46:13 PDT HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 14:46:13 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(10000000));
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:46:15 PDT ERROR:  operator does not exist: money = bigint at character 724
2025-03-11 14:46:15 PDT HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 14:46:15 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(1000000));
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:46:18 PDT ERROR:  operator does not exist: money = bigint at character 724
2025-03-11 14:46:18 PDT HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 14:46:18 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000));
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:46:29 PDT ERROR:  operator does not exist: money = bigint at character 724
2025-03-11 14:46:29 PDT HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 14:46:29 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100))
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:46:42 PDT ERROR:  syntax error at or near "(" at character 746
2025-03-11 14:46:42 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT interger SUM(100))
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:47:23 PDT ERROR:  syntax error at or near "(" at character 746
2025-03-11 14:47:23 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT interger SUM(100))::integer
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:47:28 PDT ERROR:  operator does not exist: money = integer at character 724
2025-03-11 14:47:28 PDT HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 14:47:28 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100))::integer
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:47:39 PDT ERROR:  cannot cast type money to integer at character 723
2025-03-11 14:47:39 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0)::integer = (SELECT SUM(100))::integer
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:47:53 PDT ERROR:  operator does not exist: money = numeric at character 724
2025-03-11 14:47:53 PDT HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 14:47:53 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100.00))
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:49:44 PDT ERROR:  cannot cast type money to integer at character 723
2025-03-11 14:49:44 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0)::int > (SELECT SUM(10000.00)):: int
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:55:05 PDT ERROR:  cannot cast type money to double precision at character 723
2025-03-11 14:55:05 PDT STATEMENT:  
	
	-- SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "LeftSID", "Operator", "RightSID"
	-- FROM Rules."Rule" r INNER JOIN (
	-- 	SELECT a."RuleID", a."CID", c."LeftSID", c."Operator", c."RightSID"
	-- 	FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	-- 	ON c."CID" = a."CID"
	-- ) ac ON r."RuleID" = ac."RuleID"
	-- WHERE r."RuleID" = 1;
	-- SELECT TRUE
	--  AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount0."Amount")
	-- 	 	FROM test."Transaction" Amount0 > (SELECT MAX(SELECT 1))
	-- 	 )
	--  ) AND (
	--  	SELECT (
	-- 		SELECT SUM(Amount1."Amount")
	-- 		FROM test."Transaction" Amount1= (SELECT MAX(SELECT 1))
	-- )
	
	
	SELECT True FROM (SELECT 1) WHERE (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0)::DOUBLE PRECISION > (SELECT SUM(10000.00))::DOUBLE PRECISION
		
	-- (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0) = (SELECT SUM(100000000));
	-- 	
	
2025-03-11 14:56:19 PDT ERROR:  type "string" does not exist
2025-03-11 14:56:19 PDT STATEMENT:  ALTER TABLE IF EXISTS rules."Selectors"
	    ADD COLUMN type text NOT NULL DEFAULT 'int'::string;
2025-03-11 14:57:40 PDT LOG:  checkpoint starting: time
2025-03-11 14:57:42 PDT LOG:  checkpoint complete: wrote 13 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.317 s, sync=0.022 s, total=1.354 s; sync files=12, longest=0.003 s, average=0.002 s; distance=53 kB, estimate=99 kB; lsn=0/1DD3498, redo lsn=0/1DD3440
2025-03-11 15:00:11 PDT ERROR:  spiexceptions.SyntaxError: syntax error at or near "SELECT" at character 183
2025-03-11 15:00:11 PDT QUERY:  
		    DROP FUNCTION IF EXISTS func_rule_1;
		    CREATE OR REPLACE FUNCTION func_rule_1(rule_id integer) RETURNS boolean
		    LANGUAGE SQL
		    RETURNS NULL ON NULL INPUT
		    RETURN SELECT TRUE  AND ( SELECT ((SELECT SUM(Amount0."Amount") FROM test."Transaction" Amount0))::{cached_selections[sid]["Type"]} > (SELECT MAX(100000))::money)) AND ( SELECT ((SELECT SUM(Amount1."Amount") FROM test."Transaction" Amount1))::{cached_selections[sid]["Type"]} = (SELECT MAX(100000))::money));
		    
2025-03-11 15:00:11 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 53, in <module>
	    plpy.execute(rule_sql)
	PL/Python function "create_rule_function"
2025-03-11 15:00:11 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"(SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]}))::{cached_selections[sid]["Type"]}"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''(SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}") FROM {table} {temp_id}))::{{cached_selections[sid]["Type"]}}'''
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"]
	    rule_name = rule_name.replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT ({left_subquery} {rule["Operator"]} {right_subquery}))".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION IF EXISTS func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}(rule_id integer) RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN SELECT TRUE {actions_str};
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	   
	    return rv
	
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 15:02:40 PDT LOG:  checkpoint starting: time
2025-03-11 15:02:41 PDT LOG:  checkpoint complete: wrote 11 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.100 s, sync=0.032 s, total=1.160 s; sync files=10, longest=0.011 s, average=0.004 s; distance=36 kB, estimate=92 kB; lsn=0/1DDC6E0, redo lsn=0/1DDC688
2025-03-11 15:03:16 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 15:03:16 PDT DETAIL:  IndentationError: unexpected indent (<string>, line 4)
2025-03-11 15:03:16 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"(SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]}))::{cached_selections[sid]["Type"]}"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''(SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}") FROM {table} {temp_id})::{cached_selections[sid]["Type"]}'''
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"]
	    rule_name = rule_name.replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT {left_subquery} {rule["Operator"]} {right_subquery})".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION IF EXISTS func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}(rule_id integer) RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN SELECT TRUE {actions_str};
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	   
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 15:03:24 PDT ERROR:  spiexceptions.SyntaxError: syntax error at or near "SELECT" at character 183
2025-03-11 15:03:24 PDT QUERY:  
		    DROP FUNCTION IF EXISTS func_rule_1;
		    CREATE OR REPLACE FUNCTION func_rule_1(rule_id integer) RETURNS boolean
		    LANGUAGE SQL
		    RETURNS NULL ON NULL INPUT
		    RETURN SELECT TRUE  AND ( SELECT (SELECT SUM(Amount0."Amount") FROM test."Transaction" Amount0)::money > (SELECT MAX(100000))::money) AND ( SELECT (SELECT SUM(Amount1."Amount") FROM test."Transaction" Amount1)::money = (SELECT MAX(100000))::money);
		    
2025-03-11 15:03:24 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 53, in <module>
	    plpy.execute(rule_sql)
	PL/Python function "create_rule_function"
2025-03-11 15:03:24 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"(SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]}))::{cached_selections[sid]["Type"]}"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''(SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}") FROM {table} {temp_id})::{cached_selections[sid]["Type"]}'''
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"]
	    rule_name = rule_name.replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT {left_subquery} {rule["Operator"]} {right_subquery})".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION IF EXISTS func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}(rule_id integer) RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN SELECT TRUE {actions_str};
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	   
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 15:03:59 PDT ERROR:  relation "test.Transaction" does not exist at character 62
2025-03-11 15:03:59 PDT STATEMENT:  SELECT TRUE  
	AND (SELECT (SELECT SUM(Amount0."Amount") FROM test."Transaction" Amount0)::money > (SELECT MAX(100000))::money) 
	AND ( SELECT (SELECT SUM(Amount1."Amount") FROM test."Transaction" Amount1)::money = (SELECT MAX(100000))::money);
2025-03-11 15:04:33 PDT ERROR:  spiexceptions.SyntaxError: syntax error at or near "SELECT" at character 183
2025-03-11 15:04:33 PDT QUERY:  
		    DROP FUNCTION IF EXISTS func_rule_1;
		    CREATE OR REPLACE FUNCTION func_rule_1(rule_id integer) RETURNS boolean
		    LANGUAGE SQL
		    RETURNS NULL ON NULL INPUT
		    RETURN SELECT TRUE  AND ( SELECT (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0)::money > (SELECT MAX(100000))::money) AND ( SELECT (SELECT SUM(Amount1."Amount") FROM test."Transactions" Amount1)::money = (SELECT MAX(100000))::money);
		    
2025-03-11 15:04:33 PDT CONTEXT:  Traceback (most recent call last):
	  PL/Python function "create_rule_function", line 53, in <module>
	    plpy.execute(rule_sql)
	PL/Python function "create_rule_function"
2025-03-11 15:04:33 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer)
	RETURNS table("RuleID" integer, "Name" text, "Description" text, "Trigger" text, "CID" integer, "Conjunction" text, "LeftSID" integer, "Operator" text, "RightSID" integer)
	AS $$
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"(SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]}))::{cached_selections[sid]["Type"]}"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''(SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}") FROM {table} {temp_id})::{cached_selections[sid]["Type"]}'''
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"]
	    rule_name = rule_name.replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT {left_subquery} {rule["Operator"]} {right_subquery})".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION IF EXISTS func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}(rule_id integer) RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN SELECT TRUE {actions_str};
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	   
	    return rv
	$$ LANGUAGE plpython3u;
	
	SELECT * From create_rule_function(1)
	
2025-03-11 15:05:23 PDT ERROR:  syntax error at or near "SELECT" at character 157
2025-03-11 15:05:23 PDT STATEMENT:  DROP FUNCTION IF EXISTS func_rule_1;
	CREATE OR REPLACE FUNCTION func_rule_1(rule_id integer) RETURNS boolean
	LANGUAGE SQL
	RETURNS NULL ON NULL INPUT
	RETURN SELECT TRUE  AND ( SELECT (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0)::money > (SELECT MAX(100000))::money) AND ( SELECT (SELECT SUM(Amount1."Amount") FROM test."Transactions" Amount1)::money = (SELECT MAX(100000))::money);
2025-03-11 15:06:29 PDT ERROR:  function func_rule_1() does not exist at character 412
2025-03-11 15:06:29 PDT HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 15:06:29 PDT STATEMENT:  DROP FUNCTION IF EXISTS func_rule_1;
	CREATE OR REPLACE FUNCTION func_rule_1(rule_id integer) RETURNS boolean
	LANGUAGE SQL
	RETURNS NULL ON NULL INPUT
	RETURN (SELECT TRUE  AND ( SELECT (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0)::money > (SELECT MAX(100000))::money) AND ( SELECT (SELECT SUM(Amount1."Amount") FROM test."Transactions" Amount1)::money = (SELECT MAX(100000))::money));
	
	
	SELECT(func_rule_1())
2025-03-11 15:06:34 PDT ERROR:  function func_rule_1() does not exist at character 412
2025-03-11 15:06:34 PDT HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2025-03-11 15:06:34 PDT STATEMENT:  DROP FUNCTION IF EXISTS func_rule_1;
	CREATE OR REPLACE FUNCTION func_rule_1(rule_id integer) RETURNS boolean
	LANGUAGE SQL
	RETURNS NULL ON NULL INPUT
	RETURN (SELECT TRUE  AND ( SELECT (SELECT SUM(Amount0."Amount") FROM test."Transactions" Amount0)::money > (SELECT MAX(100000))::money) AND ( SELECT (SELECT SUM(Amount1."Amount") FROM test."Transactions" Amount1)::money = (SELECT MAX(100000))::money));
	
	
	SELECT func_rule_1()
2025-03-11 15:07:40 PDT LOG:  checkpoint starting: time
2025-03-11 15:07:42 PDT LOG:  checkpoint complete: wrote 18 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.866 s, sync=0.045 s, total=1.924 s; sync files=12, longest=0.024 s, average=0.004 s; distance=77 kB, estimate=91 kB; lsn=0/1DEFD28, redo lsn=0/1DEFC98
2025-03-11 15:09:01 PDT ERROR:  unterminated dollar-quoted string at or near "$$ LANGUAGE plpython3u;" at character 2749
2025-03-11 15:09:01 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer) RETURNS text
	AS $$
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"(SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]}))::{cached_selections[sid]["Type"]}"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''(SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}") FROM {table} {temp_id})::{cached_selections[sid]["Type"]}'''
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"]
	    rule_name = rule_name.replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT {left_subquery} {rule["Operator"]} {right_subquery})".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION IF EXISTS func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}() RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN (SELECT TRUE {actions_str});
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	    function_name =f'func_{rule_name}'
	    RETURN function_name
	    AS $$
	
	$$ LANGUAGE plpython3u;
2025-03-11 15:09:18 PDT ERROR:  could not compile PL/Python function "create_rule_function"
2025-03-11 15:09:18 PDT DETAIL:  SyntaxError: invalid syntax (<string>, line 56)
2025-03-11 15:09:18 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION create_rule_function(rule_id integer) RETURNS text
	AS $$
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"(SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]}))::{cached_selections[sid]["Type"]}"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''(SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}") FROM {table} {temp_id})::{cached_selections[sid]["Type"]}'''
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"]
	    rule_name = rule_name.replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT {left_subquery} {rule["Operator"]} {right_subquery})".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION IF EXISTS func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}() RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN (SELECT TRUE {actions_str});
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	    function_name =f'func_{rule_name}'
	    RETURN function_name
	
	$$ LANGUAGE plpython3u;
2025-03-11 15:12:40 PDT LOG:  checkpoint starting: time
2025-03-11 15:12:41 PDT LOG:  checkpoint complete: wrote 17 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=1.644 s, sync=0.036 s, total=1.695 s; sync files=13, longest=0.012 s, average=0.003 s; distance=60 kB, estimate=88 kB; lsn=0/1DFED80, redo lsn=0/1DFED28
2025-03-11 15:14:41 PDT ERROR:  syntax error at or near "'create_rule_function'" at character 70
2025-03-11 15:14:41 PDT STATEMENT:  DROP FUNCTION create_rule_function;
	CREATE OR REPLACE FUNCTION rules.'create_rule_function'(rule_id integer) RETURNS text
	AS $$
	    SD['temp_idx'] = 0
	    def build_subquery(sid, cached_selections):
	        plan = plpy.prepare("""SELECT * FROM Rules."Selectors" s WHERE s."SID" = $1""", ["integer"])
	        if sid not in cached_selections:
	            result = plan.execute([sid])
	            if len(result) == 0:
	                raise ValueError
	            cached_selections[sid] = result[0]
	        if cached_selections[sid]['Schema'] == None:
	            subquery = f"(SELECT {cached_selections[sid]["Aggregator"]}({cached_selections[sid]["Target"]}))::{cached_selections[sid]["Type"]}"
	        else:
	            temp_id = f'{cached_selections[sid]["Target"]}{SD['temp_idx']}'
	            table = f'{cached_selections[sid]["Schema"]}."{cached_selections[sid]["Table"]}"'
	            SD['temp_idx'] = SD['temp_idx'] + 1
	            subquery = f'''(SELECT {cached_selections[sid]["Aggregator"]}({temp_id}."{cached_selections[sid]["Target"]}") FROM {table} {temp_id})::{cached_selections[sid]["Type"]}'''
	        plpy.notice(sid, cached_selections[sid], subquery)
	        return (cached_selections, subquery)
	
	    plan = plpy.prepare("""
	        SELECT r."RuleID", "Name", "Description", "Trigger", "CID", "Conjunction", "LeftSID", "Operator", "RightSID"
	        FROM Rules."Rule" r INNER JOIN (
	            SELECT a."RuleID", a."CID", a."Conjunction", c."LeftSID", c."Operator", c."RightSID"
	            FROM Rules."Actions" a INNER JOIN  Rules."Conditions" c 
	            ON c."CID" = a."CID"
	        ) ac ON r."RuleID" = ac."RuleID"
	        WHERE r."RuleID" = $1;
	        """, ["integer"]
	    )
	    rv = plan.execute([rule_id])
	    rule_actions_sql = [""]
	    cached_selections = {}
	    rule_name = rv[0]["Name"]
	    rule_name = rule_name.replace(" ","_").lower()
	    for rule in rv:
	        plpy.notice(rule)
	        left_sid = rule["LeftSID"]
	        right_sid = rule["RightSID"]
	        cached_selections, left_subquery = build_subquery(left_sid, cached_selections)
	        cached_selections, right_subquery = build_subquery(right_sid, cached_selections)
	        result = f"{rule["Conjunction"]} ( SELECT {left_subquery} {rule["Operator"]} {right_subquery})".replace("    "," ")
	        plpy.notice(result)
	        rule_actions_sql.append(result)
	    actions_str = " ".join(rule_actions_sql)
	    rule_sql = f"""
	    DROP FUNCTION IF EXISTS func_{rule_name};
	    CREATE OR REPLACE FUNCTION func_{rule_name}() RETURNS boolean
	    LANGUAGE SQL
	    RETURNS NULL ON NULL INPUT
	    RETURN (SELECT TRUE {actions_str});
	    """
	    plpy.notice(rule_sql)
	    plpy.execute(rule_sql)
	    function_name =f'func_{rule_name}'
	    return function_name
	
	$$ LANGUAGE plpython3u;
	
	-- SELECT create_rule_function(RuleID)
	
2025-03-11 15:17:40 PDT LOG:  checkpoint starting: time
2025-03-11 15:17:41 PDT LOG:  checkpoint complete: wrote 9 buffers (0.1%); 0 WAL file(s) added, 0 removed, 0 recycled; write=0.873 s, sync=0.024 s, total=0.921 s; sync files=8, longest=0.012 s, average=0.003 s; distance=37 kB, estimate=83 kB; lsn=0/1E08438, redo lsn=0/1E083E0
2025-03-11 15:26:26 PDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2025-03-11 15:26:26 PDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2025-03-11 15:26:26 PDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2025-03-11 15:26:26 PDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2025-03-11 15:26:26 PDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2025-03-11 15:26:26 PDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2025-03-11 15:26:26 PDT LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
